@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@inject IStringLocalizer<Index> Localizer
@inject IIdentityAdapter IdentityAdapter


<PageTitle>Profile</PageTitle>

<h3>@Localizer["Profile"]</h3>
<StatusMessage Message=@statusMessage />

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
             <div class="form-floating mb-3">
                <InputText @bind-Value="Input.FullName" class="form-control" placeholder="@Localizer["Please choose your Full Name"]" />
                <label for="full-name" class="form-label">@Localizer["FullName"]</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder=@Localizer["Please enter your phone number."] />
                <label for="phone-number" class="form-label">@Localizer["Phone number"]</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">@Localizer["Save"]</button>
        </EditForm>
    </div>
</div>

@code {
    private ApplicationUserDto userInfo = default!;
    private string? fullName;
    private string? phoneNumber;
    string? statusMessage;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        userInfo = await IdentityAdapter.GetUserInfoAsync();
        fullName = userInfo.FullName;
        phoneNumber = userInfo.PhoneNumber;
        Input.FullName ??= userInfo.FullName;
        Input.PhoneNumber ??= userInfo.PhoneNumber;
        statusMessage = await IdentityAdapter.GetStatusMessage();

    }

    private async Task OnValidSubmitAsync()
    {


        if (Input.PhoneNumber != phoneNumber || Input.FullName != fullName)
        {
            await IdentityAdapter.UpdateUserInfoAsync(new ApplicationUserDto
                {
                    Email = userInfo.Email,
                    FullName = Input.FullName ?? string.Empty,
                    PhoneNumber = Input.PhoneNumber ?? string.Empty,
                    Id = userInfo.Id
                });
         }
    }

    private sealed class InputModel
    {
        [Display(Name = "FullName")]
        public string? FullName { get; set; }


        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }
}

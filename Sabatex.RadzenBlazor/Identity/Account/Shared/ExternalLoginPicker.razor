@using Microsoft.Extensions.Localization
@using Radzen.Blazor
@using Sabatex.Core.Identity
@using Sabatex.RadzenBlazor.Identity

@inject IIdentityAdapter IdentityAdapter
@inject IStringLocalizer<ExternalLoginPicker> Localizer



@if (externalProviders.Length > 0)
{
     <RadzenFieldset Text=@Localizer["Use another service to log in."] Style="background-color:aliceblue;" >
             <form action="Account/PerformExternalLogin" method="post">
                <AntiforgeryToken />
                <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
                <RadzenRow Gap="4px" JustifyContent="JustifyContent.Center">
                @foreach (var provider in externalProviders)
                {
    
            @switch(provider.Name)
            {
                case "Microsoft":
                    <MicrosoftIdentityButton />
                    break;
                case "Google":
                    <GoogleIdentityButton />
                    break;
                default:
                    <RadzenButton 
                        ButtonStyle="ButtonStyle.Light"
                        Style="margin:0 .5rem"
                        Click="() => ExternalLogin(provider.Name)">
                        @provider.Name
                    </RadzenButton>
                    break;
                        }
                }
            </RadzenRow>
            </form>
       </RadzenFieldset> 
    
}


@code {
    [Parameter]
    public string? Header { get; set; }

    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    private ExternalProvider[] externalProviders = Array.Empty<ExternalProvider>();



    protected override async Task OnInitializedAsync()
    {
        externalProviders = (await IdentityAdapter
            .GetExternalProvidersAsync())
            .ToArray();
    }

    private void ExternalLogin(string provider)
    {
        var parameters = new Dictionary<string, object?>
        {
            ["provider"] = provider,
            ["returnUrl"] = ReturnUrl
        };

        // Тут використовуємо RedirectManager – якщо це Blazor Server, буде NavigateTo(...)
        // з forceLoad, а у WASM – просто NavigateTo.
        IdentityAdapter.RedirectTo("Account/PerformExternalLogin", parameters);
    }

}


@typeparam TKey
@typeparam TItem where TItem : class, IEntityBase<TKey>,new()
@inherits SabatexRadzenBlazorBaseDataComponent<TKey>

@if (Item == null)
{
    <p><em>Loading ...</em></p>
}
else
{
    <RadzenTemplateForm Data="@Item" TItem="TItem" Submit="OnSubmit">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem" Class="rz-mt-4 rz-mb-4">
            <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Small" Icon="save" Text=@TextButtonSave Disabled="IsReadOnly"/>
            <RadzenButton ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Size="ButtonSize.Small" Icon="cancel" Text=@TextButtonCancel Click="@Cancel" />
            @if (Buttons != null)
            {
                @Buttons
            }
        </RadzenStack>
       <RadzenRow>
             <DataAnnotationsValidator />
             <ValidationSummary />
            @if (Content !=null)
            {
                @Content(Item)
            }
        </RadzenRow>
    </RadzenTemplateForm>
}




@code {
    [Parameter]
    public bool? IsNew { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }


    [Parameter]
    public RenderFragment<TItem?> Content { get; set; } = default!;

    [Parameter]
    public TItem? Item { get; set; }

    [Parameter]
    public EventCallback<TItem> OnBeforeSubmit { get; set; }

    [Parameter]
    public bool IsReadOnly { get; set; }

    [Parameter]
    public RenderFragment Buttons { get; set; } = default!;

    [Parameter]
    public string TextButtonSave { get; set; } = "Save";

    [Parameter]
    public string TextButtonCancel { get; set; } = "Cancel";

    [Parameter]
    public string WriteErrorText { get; set; } = "";

    protected ValidationSummary? ValidationSummary;

    void ReturnToList()
    {
        if (ReturnUrl == null)
            NavigationManager.NavigateTo("/");
        else
        {
            NavigationManager.NavigateTo(ReturnUrl);
        }

    }
    protected void Cancel()
    {
        ReturnToList();
    }


    protected async Task OnSubmit(TItem item)
    {
        await OnBeforeSubmit.InvokeAsync(item);

        SabatexValidationModel<TItem>? result;

        try
        {
            if (IsNew ?? false)
                result = await DataAdapter.PostAsync<TItem>(item);
            else
                result = await DataAdapter.UpdateAsync<TItem>(item);
            if (result == null)
            {
                NotificationService?.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = $"Помилка запису", Detail = "Server response null" });
                return;
            }

            if (result.Result != null)
            {
                ReturnToList();
                return;
            }

            if (result.Errors != null)
            {
                var error = result.Errors[""];
                if (error != null)
                {
                    string s = string.Empty;
                    foreach (var item1 in error) s = s + item1 + "\r\n";
                    NotificationService?.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = $"Помилка запису", Detail = s });
                }

                return;
            }
            NotificationService?.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = $"Помилка запису", Detail = "Uknown Error" });
        }
        catch (Exception ex)
        {
            NotificationService?.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = $"Помилка запису", Detail = ex.Message });
        }
    }

}
